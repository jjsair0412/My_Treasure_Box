# apiextensions.k8s.io/v1을 지정하여 open API v3.0을 통해 구조를 검사하도록 정의
# structural schema 문서 읽어보기
apiVersion: apiextensions.k8s.io/v1
# kind는 CustomResourceDefinition
kind: CustomResourceDefinition
metadata:
  # name must match the spec fields below, and be in the form: <plural>.<group>
  name: helloworlds.jjsair0412.example.com
spec:
  # group name to use for REST API: /apis/<group>/<version>
  group: jjsair0412.example.com
  # list of versions supported by this CustomResourceDefinition
  versions:
    # version 명시
    - name: v1
      # Each version can be enabled/disabled by Served flag.
      served: true
      # One and only one version must be marked as the storage version.
      storage: true
      schema:
        # openAPIV3Schema는 required option
        openAPIV3Schema:
          # k8s object type
          type: object
          # spec 필드 또한 필수 옵션.
          required: ["spec"]
          properties:
            spec:
              type: object
              required: ["appId", "replicas", "message","image"] # appId , replicas , message, image는 필수 옵션
              properties:
                message: # go struct 및 cr에 message를 입력하게끔 정의.
                  type: string # message의 data type 지정
                image: #go struct 및 cr에 image를 입력하게끔 정의.
                  type: string # image의 data type 지정
                appId: # go struct 및 cr에 appId를 입력하게끔 정의.
                  type: string # appId data type 지정
                replicas: #  go struct 및 cr에 replicas를 입력하게끔 정의.
                  type: integer # replicas의 data type 지정
                  minimum: 1 # 최소 1개~ 최대 3개
                  maximum: 3
                language: # go struct 및 cr에 language를 입력하게끔 정의.
                  type: string # language data type 지정
                  enum: # enum을 통해 데이터 미리 정해놓고, 셋중 하나가 아니라면 에러터지게끔 생성
                    - java
                    - go
                    - python
  # either Namespaced or Cluster , namespace에 종속적이게끔 생성
  scope: Namespaced
  names:
    # plural name to be used in the URL: /apis/<group>/<version>/<plural>
    plural: helloworlds
    # kubectl CLI 출력 결과 출력될 이름
    # singular name to be used as an alias on the CLI and for display
    singular: helloworld
    # CR의 Kind가 될 이름
    # kind is normally the CamelCased singular type. Your resource manifests use this.
    kind: helloworld
    # hw로 kubectl 명령어 날릴 수 있도록 생성
    # shortNames allow shorter string to match your resource on the CLI
    shortNames:
      - hw