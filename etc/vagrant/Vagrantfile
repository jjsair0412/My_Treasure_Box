# -*- mode: ruby -*-
# vi: set ft=ruby :


$installcontainerruntime = <<-SCRIPT
echo "Updating packages..."
sudo apt-get update -y

echo "start install containerd"
cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

sudo sysctl --system

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt update -y
sudo apt install -y containerd.io
sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml

echo "start containerd"
sudo systemctl restart containerd
sudo systemctl enable containerd

SCRIPT


$installkube = <<-SCRIPT
sudo su

echo "Disable swap memory .."
swapoff -a && sed -i '/swap/s/^/#/' /etc/fstab

cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
br_netfilter
EOF

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sudo sysctl --system

echo "Disable firewalld .."
systemctl stop firewalld
systemctl disable firewalld

echo "install kubeadm , kubectl , kubelet .."
sudo apt-get update -y
sudo apt-get install -y apt-transport-https ca-certificates curl

sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg

echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update -y
sudo apt-get install -y kubelet kubeadm kubectl

sudo apt-mark hold kubelet kubeadm kubectl

sudo systemctl start kubelet
sudo systemctl enable kubelet

SCRIPT

$masterConfig = <<-SCRIPT
echo 'init start ..'
sudo kubeadm init

echo 'token create ..'
sudo kubeadm token create --print-join-command > $OUTPUT_FILE
chmod +x $OUTPUT_FILE

echo 'print join command file location ..'
pwd
ls

sudo mkdir -p $HOME/.kube
sudo cp /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

kubectl get nodes
SCRIPT

Vagrant.configure("2") do |config|

  config.vm.boot_timeout = 600
  config.vm.define "master" do |master| # | | 내부는 alias, 첫글자는 대문자가 올 수 없다.
    master.vm.box = "ubuntu/focal64"
    master.vm.host_name = "master"
    master.vm.provider :virtualbox do |masterSpec|
      masterSpec.memory = 4096
      masterSpec.cpus = 4
    end
    master.vm.provision "shell", inline: $installcontainerruntime
    master.vm.provision "shell", inline: $installkube
    master.vm.provision "shell", inline: $masterConfig
  end

  (1..2).each do |n|
    config.vm.define "worker-#{n}" do |worker|
      worker.vm.box = "ubuntu/focal64"
      worker.vm.host_name = "worker-#{n}"
      worker.vm.provider :virtualbox do |workerSpec|
        workerSpec.memory = 4096
        workerSpec.cpus = 4
      end
      worker.vm.provision "shell", inline: $installcontainerruntime
      worker.vm.provision "shell", inline: $installkube
    end


  end
end